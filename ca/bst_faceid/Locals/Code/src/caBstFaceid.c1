/*
 * Copyright (c) 2018 TRUSTONIC LIMITED
 * All rights reserved
 *
 * The present software is the confidential and proprietary information of
 * TRUSTONIC LIMITED. You shall not disclose the present software and shall
 * use it only in accordance with the terms of the license agreement you
 * entered into with TRUSTONIC LIMITED. This software may be subject to
 * export or import laws in certain countries.
 */

#include <stdlib.h>
#include "caFaceRecognition.h"
#include "log.h"

extern TEEC_Result caInvokeCmd(uint32_t cmd_id,
    void* in, uint32_t inLength,
    void* out, uint32_t* outLength,
    void* in2, uint32_t in2Length);


int32_t open_tee_faceid(){}
void close_tee_faceid(){}

typedef struct __attribute__((__packed__)) {
    uint8_t version;  // Current version is 0
    uint64_t challenge;
    uint64_t user_id;             // secure user ID, not Android user ID
    uint64_t authenticator_id;    // secure authenticator ID
    uint32_t authenticator_type;  // hw_authenticator_type_t, in network order
    uint64_t timestamp;           // in network order
    uint8_t hmac[32];
} hw_auth_token_t;


/*
About hw_auth_token_t, you can refer toï¼š

(hardware/libhardware/include/hardware/hw_auth_token.h)
typedef struct __attribute__((__packed__)) {
    uint8_t version;  // Current version is 0
    uint64_t challenge;
    uint64_t user_id;             // secure user ID, not Android user ID
    uint64_t authenticator_id;    // secure authenticator ID
    uint32_t authenticator_type;  // hw_authenticator_type_t, in network order
    uint64_t timestamp;           // in network order
    uint8_t hmac[32];
} hw_auth_token_t;
*/

int32_t addFeature(const char* feature_data, int* fid,const hw_auth_token_t *hat)
{
	
	return 0;
}
int32_t removeFeature(uint32_t fid)
{
	return 0;
	
}
int32_t compare(const char* feature_data)
{
	return 0;
	
}
uint64_t get_challenge(void)
{
	TEEC_Result nError = TEEC_SUCCESS;
	uint64_t challenge;
	uint32_t challenge_length = sizeof(challenge);	
    LOG_D("%s", __func__);

	nError = caInvokeCmd(CMD_GET_CHALLENGE, NULL, 0, &challenge, &challenge_length, NULL, 0);
    return nError;
}